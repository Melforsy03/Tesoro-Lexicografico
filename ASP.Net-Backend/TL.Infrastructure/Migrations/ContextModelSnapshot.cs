// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TL.Infrastructure;

#nullable disable

namespace TL.Infrastructure.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TL.Domain.Entidades.Acepcion", b =>
                {
                    b.Property<int>("IdAc")
                        .HasColumnType("integer");

                    b.Property<string>("ClasePal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ClaseSem")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Def")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Etim")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("IdEnt")
                        .HasColumnType("integer");

                    b.Property<int>("NumDef")
                        .HasColumnType("integer");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdAc");

                    b.ToTable("Acepciones");
                });

            modelBuilder.Entity("TL.Domain.Entidades.Diccionario", b =>
                {
                    b.Property<int>("IdDic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdDic"));

                    b.Property<string>("DicNombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdDic");

                    b.ToTable("Diccionarios");
                });

            modelBuilder.Entity("TL.Domain.Entidades.Editor", b =>
                {
                    b.Property<int>("IdEd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdEd"));

                    b.Property<bool>("EsAdmin")
                        .HasColumnType("boolean");

                    b.Property<string>("NomEd")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdEd");

                    b.ToTable("Editores");
                });

            modelBuilder.Entity("TL.Domain.Entidades.Metadatos", b =>
                {
                    b.Property<int>("IdMet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdMet"));

                    b.Property<string>("Autor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CodigoDePais")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Edicion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FechaDePublicacion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FechaDeRevision")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FechaDeTranscripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FechaOriginal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FuenteURL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("IdDic")
                        .HasColumnType("integer");

                    b.Property<string>("LugarDePublicacion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NombreDeFuente")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NombreDePrologo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NombreDeProyecto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PrologoURL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Publicador")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Revisor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Siglo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TituloCompleto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Transcriptor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdMet");

                    b.HasIndex("IdDic");

                    b.ToTable("Metadatos");
                });

            modelBuilder.Entity("TL.Domain.Entidades.Termino", b =>
                {
                    b.Property<int>("IdTer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdTer"));

                    b.Property<int>("NomReg")
                        .HasColumnType("integer");

                    b.HasKey("IdTer");

                    b.ToTable("Terminos");
                });

            modelBuilder.Entity("TL.Domain.Relaciones.DiccionarioTermino", b =>
                {
                    b.Property<int>("IdDicTer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdDicTer"));

                    b.Property<bool>("EsSubEntrada")
                        .HasColumnType("boolean");

                    b.Property<bool>("EsSuperEntrada")
                        .HasColumnType("boolean");

                    b.Property<int>("IdDic")
                        .HasColumnType("integer");

                    b.Property<int>("IdTer")
                        .HasColumnType("integer");

                    b.Property<string>("NomEntrada")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdDicTer");

                    b.HasIndex("IdDic");

                    b.HasIndex("IdTer");

                    b.ToTable("Entradas");
                });

            modelBuilder.Entity("TL.Domain.Relaciones.SubEntrada", b =>
                {
                    b.Property<int>("IdSubEnt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdSubEnt"));

                    b.Property<int>("IdEntHijo")
                        .HasColumnType("integer");

                    b.Property<int>("IdEntPadre")
                        .HasColumnType("integer");

                    b.HasKey("IdSubEnt");

                    b.HasIndex("IdEntHijo");

                    b.HasIndex("IdEntPadre");

                    b.ToTable("SubEntradas");
                });

            modelBuilder.Entity("TL.Infrastructure.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TL.Infrastructure.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TL.Infrastructure.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TL.Infrastructure.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TL.Infrastructure.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TL.Domain.Entidades.Acepcion", b =>
                {
                    b.HasOne("TL.Domain.Relaciones.DiccionarioTermino", "Entrada")
                        .WithMany()
                        .HasForeignKey("IdAc")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entrada");
                });

            modelBuilder.Entity("TL.Domain.Entidades.Metadatos", b =>
                {
                    b.HasOne("TL.Domain.Entidades.Diccionario", "Diccionario")
                        .WithMany()
                        .HasForeignKey("IdDic")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diccionario");
                });

            modelBuilder.Entity("TL.Domain.Relaciones.DiccionarioTermino", b =>
                {
                    b.HasOne("TL.Domain.Entidades.Diccionario", "Diccionario")
                        .WithMany()
                        .HasForeignKey("IdDic")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TL.Domain.Entidades.Termino", "Termino")
                        .WithMany()
                        .HasForeignKey("IdTer")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Diccionario");

                    b.Navigation("Termino");
                });

            modelBuilder.Entity("TL.Domain.Relaciones.SubEntrada", b =>
                {
                    b.HasOne("TL.Domain.Relaciones.DiccionarioTermino", "EntradaHijo")
                        .WithMany()
                        .HasForeignKey("IdEntHijo")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TL.Domain.Relaciones.DiccionarioTermino", "EntradaPadre")
                        .WithMany()
                        .HasForeignKey("IdEntPadre")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntradaHijo");

                    b.Navigation("EntradaPadre");
                });
#pragma warning restore 612, 618
        }
    }
}
